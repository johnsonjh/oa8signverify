#!/usr/bin/env sh

set -e -u

# shellcheck disable=SC2097,SC2098
if ! PATH="$(command -p env -i \
	getconf PATH)" \
		command -p env -i TMPDIR="${TMPDIR:-}" PATH="${PATH:?}" \
			rm -f "$(command -p env -i TMPDIR="${TMPDIR:-}" mktemp)"; then
				printf '%s\n' \
					"Error: shell is misbehaving."
				exit 1
fi

cleanup() {
	command -p env -i \
		rm -f "${tmpfile:-}" ||
			true
}

filename=${1:-}
signature=${2:-}
publickey=${3:-}

if ! command -p env \
		openssl version > /dev/null 2>&1; then
		printf '%s\n' \
			"Error: openssl could not be executed."
		exit 1
fi

if ! command -p env \
		ascii85 -h > /dev/null 2>&1; then
		printf '%s\n' \
			"Error: ascii85 could not be executed."
		printf '%s\n' \
			'Suggestion: "gem install Ascii85".'
		exit 1
fi

if [ ${#} -lt 3 ]; then
	printf '%s\n' \
		"*** oa8verify (v1.1.0)"
	printf '%s\n' \
		"Usage: oa8verify <file> <signature.oa8> <public.oa8>"
	exit 1
fi

tmpfile="$(command -p env -i TMPDIR="${TMPDIR:-}" \
	mktemp)" ||
		{
			printf '%s\n' \
				"Error: mktemp failure."
			exit 1
		}

command -p env \
	ascii85 -d \
		< "${signature:?Error: signature undefined.}" \
			> "${tmpfile:?Error: tmpfile undefined.}" ||
				{
					printf '%s\n' \
						"Error: Signature parsing failure."
					cleanup
					exit 1
				}

command -p env \
	openssl dgst -sha3-512 \
		-verify "${publickey:?Error: publickey undefined.}" \
			-signature "${tmpfile:?Error: tmpfile undefined.}" \
				"${filename:?Error filename undefined}" ||
					{
						printf '%s\n' \
							"Error: Verification failure."
						cleanup
						exit 1
					}

cleanup
